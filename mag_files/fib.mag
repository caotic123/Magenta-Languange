#macro
#define macro-syntax (#var x)[(#var y)]
vars -> ($d)
top -> #($d) = (_get((x), (y)) 
return -> ($d)
#end macro

#define macro-syntax (#var x)={(..any...)}
top -> #(x) = (mag_vector(())
macro -> vector->","->(..any..)
#end macro

#define macro-syntax (vector)
top -> #(x) = (push())
#end macro

#define macro-syntax (#var x)%(#var y)
vars -> ($d)
top -> #($d) = (_mod((x), (y)) 
return -> ($d)
#end macro
#macro

function fib(limit)
#n = (limit)
#z = (1)
#x = (1)
#y = (1)
#b = (new_int())
if ((z) < (n))
#b = (x+y)
#x = (y)
#y = (b)
#z = (z+1)
while
ret (b)

function main()
func print("Enter limit of Fibbonaci Sequence")
#fib_limit = (get_scanf_int_insecure())
#x = (fib((fib_limit)))
func print_n((x))